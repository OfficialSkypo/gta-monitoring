<?php

namespace frontend\modules\developer\models;

use common\models\Activity;
use Yii;
use common\models\User;
use yii\helpers\HtmlPurifier;

/**
 * This is the model class for table "questions_comments".
 *
 * @property int $id
 * @property int $user_id Пользователь
 * @property int $question_id Вопрос
 * @property int $answer_id Ответ
 * @property string $text Текст
 * @property string $date Дата
 *
 * @property Questions $question
 * @property User $user
 */
class QuestionsComments extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'questions_comments';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['user_id', 'question_id', 'text'], 'required'],
            [['user_id', 'question_id', 'answer_id'], 'integer'],
            [['text'], 'string'],
            [['date'], 'safe'],
            [['question_id'], 'exist', 'skipOnError' => true, 'targetClass' => Questions::className(), 'targetAttribute' => ['question_id' => 'id']],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['user_id' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('questions', 'ID'),
            'user_id' => Yii::t('questions', 'Пользователь'),
            'question_id' => Yii::t('questions', 'Вопрос'),
            'answer_id' => Yii::t('questions', 'Ответ'),
            'text' => Yii::t('questions', 'Текст'),
            'date' => Yii::t('questions', 'Дата'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getQuestion()
    {
        return $this->hasOne(Questions::className(), ['id' => 'question_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::className(), ['id' => 'user_id']);
    }

    public function add()
    {
        $this->user_id = Yii::$app->user->id;
        $this->text = HtmlPurifier::process($this->text);

        if (!$this->validate()) {
            return false;
        }

        if ($this->answer_id != '-1') {
            $checkAnswer = QuestionsAnswers::findOne(['id' => $this->answer_id]);

            if (empty($checkAnswer) || $checkAnswer->question_id != $this->question_id) {
                return false;
            }
        }

        return $this->save();
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        if (!$insert) {
            return true;
        }

        $activity = new Activity();
        $activity->main_id = $this->user_id;
        $activity->main_type = Activity::MAIN_TYPE_USER;

        if ($this->answer_id == '-1') {
            $activity->type = Activity::TYPE_NEW_QUESTION_COMMENT;
            $activity->data = json_encode([
                'username' => $this->user->username,
                'question_id' => $this->question_id,
                'parent_category_eng' => $this->question->category->parent->title_eng,
                'category_eng' => $this->question->category->title_eng,
                'title_eng' => $this->question->title_eng,
                'title' => $this->question->title,
            ]);
        } else {
            $activity->type = Activity::TYPE_NEW_QUESTION_ANSWER_COMMENT;
            $activity->data = json_encode([
                'username' => $this->user->username,
                'question_id' => $this->question_id,
                'parent_category_eng' => $this->question->category->parent->title_eng,
                'category_eng' => $this->question->category->title_eng,
                'title_eng' => $this->question->title_eng,
                'title' => $this->question->title,
            ]);
        }
        $activity->save();
    }
}
